enum node_kind {ID_NODE,INTEGER_NODE,LPRP_NODE,PLUS_NODE,MINUS_NODE,STAR_NODE,DIV_NODE,UMINUS_NODE,ASSIGN_NODE,
				DECLARE_SUB_NODE,INT_NODE,FLOAT_NODE,CHAR_NODE,INTS_NODE,FLOATS_NODE,CHARS_NODE,
				INC_PREFIX_NODE,INC_SUFFIX_NODE,DEC_PREFIX_NODE,DEC_SUFFIX_NODE,
				IF_NODE,ELSE_NODE,CONTINUE_NODE,BREAK_NODE,WHILE_NODE,
				GREATER_NODE,LESS_NODE,EQUAL_NODE,GREATER_EQUAL_NODE,LESS_EQUAL_NODE};

typedef struct Exp {
	enum node_kind kind;
	union {
		char type_id[33];             //由标识符生成的exp结点
		int type_integer;            //由常数生成的exp结点
		struct {
			struct Exp *pExp1;
			struct Exp *pExp2;
			}ptr;              //有运算生成的exp结点
	};
} *PEXP;

enum array_kind {LP_ARRAY,RP_ARRAY,BLP_ARRAY,BRP_ARRAY,PLUS_ARRAY,MINUS_ARRAY,STAR_ARRAY,DIV_ARRAY,INTEGER_ARRAY,ID_ARRAY,
				 ASSIGNOP_ARRAY,INT_ARRAY,FLOAT_ARRAY,CHAR_ARRAY,GREATER_ARRAY,LESS_ARRAY,EQUAL_ARRAY,GREATER_EQUAL_ARRAY,
				 LESS_EQUAL_ARRAY,IF_ARRAY,ELSE_ARRAY,WHILE_ARRAY,CONTINUE_ARRAY,BREAK_ARRAY,INC_ARRAY,DEC_ARRAY,
				 INTS_ARRAY,FLOATS_ARRAY,CHARS_ARRAY};
				 
typedef struct Array {
	enum array_kind kind;
	char value[30];
	struct Array *next;
} *ARRAYP;

